@model WebUI.Models.PersonModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Phonebook", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>PersonModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.StreetId)
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Street.Id)
        @Html.HiddenFor(model => model.Street.CityId)
        @Html.HiddenFor(model => model.Street.City.Id)
        @Html.HiddenFor(model => model.Street.City.CountryId)
        @Html.HiddenFor(model => model.Street.City.Country.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            int count = 0;
        }
        @do
        {
            @Html.HiddenFor(model => model.Phones[count].Id)
            @Html.HiddenFor(model => model.Phones[count].PersonId)
            <div class="form-group">
                @Html.LabelFor(model => model.Phones[count].Number, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phones[count].Number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phones[count].Number, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phones[count].Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phones[count].Type, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phones[count].Type, "", new { @class = "text-danger" })
                </div>
            </div>
            count++;
        } while (count < Model.Phones?.Count);

        <div class="form-group">
            @Html.LabelFor(model => model.Street.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Street.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Street.City.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Street.City.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street.City.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Street.City.Country.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Street.City.Country.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street.City.Country.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
            }


<div id="floating-panel">
    <input type="button" value="Get location" id="submit">
    <div id="map_canvas" style="width:700px; height:450px;"></div>
</div>
<div id="map"></div>
<script type="text/javascript" src="http://maps.google.com/maps/api/js"></script>
   <script>
 function initialize() {
        var dp = { lat: 48.473796, lng: 35.017151 };
        var map = new google.maps.Map(document.getElementById('map_canvas'), {
            zoom: 17,
            center: dp
        });

        var geocoder = new google.maps.Geocoder();
        google.maps.event.addListener(map, 'click', function (event) {
            addMarker(event.latLng, map);
            var add = $(".address_container > input");

            geocoder.geocode({ 'location': event.latLng }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    $("#Addresses_0__Number").val(results[0].address_components[0].long_name);
                    $("#Street_Name").val(results[0].address_components[1].long_name);
                    $("#Street_City_Name").val(results[0].address_components[3].long_name);
                    $("#Street_City_Country_Name").val(results[0].address_components[6].long_name);
                }
            });
        });

        addMarker(dp, map);


        document.getElementById('submit').addEventListener('click', function () {
            console.log($(".address_container > input"));
            var add = $(".address_container > input");
            var address = add[4].value + "," + add[5].value + "," + add[6].value + "," + add[7].value;
            geocodeAddress(geocoder, map, address);

        });
    }
    var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var labelIndex = 0;

    function addMarker(location, map) {
        var marker = new google.maps.Marker({
            position: location,
            label: labels[labelIndex++ % labels.length],
            map: map
        });
    }


    function geocodeAddress(geocoder, resultsMap, address) {

        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                resultsMap.setCenter(results[0].geometry.location);

                var add = $(".address_container > input");
                add[11].value = results[0].geometry.location.lat();
                add[12].value = results[0].geometry.location.lng();


                var marker = new google.maps.Marker({
                    map: resultsMap,
                    position: results[0].geometry.location
                });

            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });

    }
    google.maps.event.addDomListener(window, 'load', initialize);

</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}